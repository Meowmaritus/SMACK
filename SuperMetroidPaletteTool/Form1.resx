<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>166, 17</value>
  </metadata>
  <data name="textBoxInputColor_FROM.ToolTip" xml:space="preserve">
    <value>The color to start the gradient with, inputted as a list of 16-bit (dword) values in hexadecimal.
Parsing is very lenient so it ignores all kinds of extra symbols, such as the ones that would be in a *.asm file.

Some valid examples:
-"1234, 1234, 1234"
-"dw $1234, 1234, 1234"
-"dw $1234 : dw $1234 : dw $1234"</value>
  </data>
  <data name="panelFromColor.ToolTip" xml:space="preserve">
    <value>Click a color square to bring up an editor for that color.
Click another color to switch to editing it instead (changes to original color will be preserved). 
Also, clicking the currently-editing color square again will close the color editor, though the editor itself has its own close button like a normal window.</value>
  </data>
  <data name="comboBoxInterpolationType.ToolTip" xml:space="preserve">
    <value>Specifies how the values will be interpolated from one color in the 'From Palette' to the corresponding color in the 'To Palette'.

-"R, G, B": Each RGB (Red, Green, Blue) channel of 'From' color will smoothly transition to the corresponding channel in the 'To' color.

-"H, S, L": Each HSV (Hue, Saturation, Lightness) channel of 'From' color will smoothly transition to the corresponding channel in the 'To' color.
    -This can result in interesting effects due to the way the hue needs to shift over a span of other hues in order to reach the target hue.
    
-"Entire Value": The entire 'From' color as a 16-bit integer value will smoothly transition to that of the 'To' color.
    -This results in utterly deranged looking effects. Inluded for amusement mostly.</value>
  </data>
  <data name="label1.ToolTip" xml:space="preserve">
    <value>Specifies how the values will be interpolated from one color in the 'From Palette' to the corresponding color in the 'To Palette'.

-"R, G, B": Each RGB (Red, Green, Blue) channel of 'From' color will smoothly transition to the corresponding channel in the 'To' color.

-"H, S, L": Each HSV (Hue, Saturation, Lightness) channel of 'From' color will smoothly transition to the corresponding channel in the 'To' color.
    -This can result in interesting effects due to the way the hue needs to shift over a span of other hues in order to reach the target hue.
    
-"Entire Value": The entire 'From' color as a 16-bit integer value will smoothly transition to that of the 'To' color.
    -This results in utterly deranged looking effects. Inluded for amusement mostly.</value>
  </data>
  <data name="panelOutput.ToolTip" xml:space="preserve">
    <value>Click a color square to bring up an editor for that color.
Click another color to switch to editing it instead (changes to original color will be preserved). 
Also, clicking the currently-editing color square again will close the color editor, though the editor itself has its own close button like a normal window.

Note regarding the Output Palette List specifically: If you make adjustments to any of the input colors, your adjustments will be overwritten and lost forever.
The ability to use the editor on the output colors at all is only offered as a convenience if you need to touch up a few colors slightly before grabbing your final ASM output.
</value>
  </data>
  <data name="textBoxOutputAsm.ToolTip" xml:space="preserve">
    <value>The final generic assembly for the entire palette gradient. Will work in xkas and asar. Other assemblers not tested.
Writes colors from left-to-right, and writes each row from the palette gradient from top-to-bottom.</value>
  </data>
  <data name="panelToColor.ToolTip" xml:space="preserve">
    <value>Click a color square to bring up an editor for that color.
Click another color to switch to editing it instead (changes to original color will be preserved). 
Also, clicking the currently-editing color square again will close the color editor, though the editor itself has its own close button like a normal window.</value>
  </data>
  <data name="textBoxInputColor_TO.ToolTip" xml:space="preserve">
    <value>The color to end the gradient with, inputted as a list of 16-bit (dword) values in hexadecimal.
Parsing is very lenient so it ignores all kinds of extra symbols, such as the ones that would be in a *.asm file.

Some valid examples:
-"1234, 1234, 1234"
-"dw $1234, 1234, 1234"
-"dw $1234 : dw $1234 : dw $1234"
</value>
  </data>
  <metadata name="timerUpdateColor.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="label4.ToolTip" xml:space="preserve">
    <value>Hard to describe what this feature does honestly, it kind of bends the gradient back and forth?
I don't know, just input a gradient and then try dragging this up and down and see if it's something you want.</value>
  </data>
  <data name="trackBarCurvePower.ToolTip" xml:space="preserve">
    <value>Hard to describe what this feature does honestly, it kind of bends the gradient back and forth?
I don't know, just input a gradient and then try dragging this up and down and see if it's something you want.</value>
  </data>
  <data name="numericUpDownCurvePower.ToolTip" xml:space="preserve">
    <value>Hard to describe what this feature does honestly, it kind of bends the gradient back and forth?
I don't know, just input a gradient and then try dragging this up and down and see if it's something you want.</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>61</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAGBgAAAEAGABIBwAAFgAAACgAAAAYAAAAMAAAAAEAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQJgAQJgAAAAAAAD/PwAAQJgAQJgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQJgAAAAAAAAAgLAAyNgAgLAAAAD/PwAACCD/
        PwAAAAAAQJgAAAAAQJgAQJgAAAAAAAAAAAAAQJgAQJgAAAAAAAAAAAAAAAAAAAAAAAAAgLAAyNgAgLAA
        QJj/PwAACCAACCAACCD/PwAAyNgAgLAAyNgAgLAAAAAAQJgAgLAAgLAAAAAAQJgAAAAAQJgAAAAAAAAA
        AAAAQJgAgLAAQJj/PwAACCAoMDAoMDAoMDAACCD/PwAAyNgAgLAAQJgAAAAAQJgAAAAAAAAAAAAAyNgA
        QJgAAAAAAAAAQJgAQJgAAAAAAAD/PwAACCBYaGhYaGhYaGgoMDAoMDAACCD/PwAAQJgAQJgAAAAAAAAA
        AAAAQJgAAAAAAAAAgLAAAAAAAAAAgLAAAAAAQJgAQJj/PwAACCBYaGhYaGhYaGgoMDAoMDAoMDAACCD/
        PwAAgLAAQJgAAAAAAAAAAAAAQJgAAAAAAAAAQJgAQJgAgLAAAAAAQJj/PwAACCAACCBYaGhYaGhYaGhY
        aGgoMDAoMDAACCD/PwAAgLAAgLAAQJgAAAAAAAAAAAAAAAAAAAAAQJgAyNgAgLAAQJgAgLD/PwAACCAo
        MDBYaGhYaGgoMDCoyMiAmJiAmJgACCAACCD/PwAAQJgAQJgAAAAAAAAAQJgAgLAAgLAAgLAAyNgAyNgA
        QJgAgLD/PwAoMDCAmJhYaGgoMDBYaGioyMhYaGgoMDAACCAACCAACCD/PwAAQJgAQJgAQJgAQJgAgLAA
        yNgAAAAAyNgAyNgAAAAAQJj/PwAoMDAoMDCoyMioyMioyMgoMDCAmJgoMDAACCCoyMgACCAACCD/PwAA
        QJgAQJgAgLAAQJgAyNgAQJgAgLAAgLAAAAAAQJj/PwCoyMgACCCoyMgoMDCoyMiAmJgoMDAoMDAACCBY
        aGioyMgACCD/PwAAgLAAQJgAgLAAgLAAQJgAQJgAQJgAQJgAQJgAQJj/PwBYaGgACCCoyMgoMDAoMDAo
        MDAoMDAACCCoyMhYaGgACCCoyMj/PwAAgLAAQJgAQJgAQJgAQJgAAAAAAAAAQJgAQJgAgLD/PwBYaGgA
        CCD/PwAoMDAoMDCAmJiAmJgACCAACCBYaGgACCAACCBYaGj/PwAAgLAAgLAAQJgAAAAAAAAAAAAAQJgA
        QJgAyNj/PwCAmJgACCD/PwAACCCAmJgACCCoyMhYaGgACCD/PwCoyMgACCAACCD/PwAAyNgAyNgAgLAA
        QJgAAAAAQJgAAAAAQJgAyNgAgLD/PwAACCD/PwD/PwCoyMgACCAACCBYaGgACCAACCD/PwBYaGj/PwAA
        yNj40ND40NAAgLAAQJgAAAAAAAAAAAAAQJgAgLAAyNgAgLD/PwAAgLD/PwBYaGgACCD/PwD/PwCoyMgA
        CCAACCD/PwCAmJj/PwAAyNgAgLAAgLAAQJgAAAAAAAAAAAAAQJgAQJgAgLAAyNgAyNgAgLD/PwBYaGio
        yMgACCD/PwD/PwBYaGgACCD/PwD/PwAAgLAAgLAAgLAAQJgAAAAAAAAAAAAAAAAAgLAAyNgAQJgAQJgA
        QJgAQJgAyNj/PwCoyMhYaGgACCD/PwD/PwCAmJj/PwAAgLAAyNgAgLAAQJgAAAAAAAAAAAAAAAAAAAAA
        AAAAyNgAyNgAAAAAQJgAQJgAyNgAgLD/PwBYaGiAmJj/PwAAQJj/PwD40NAAyNgAyNgAyNgAgLAAQJgA
        AAAAAAAAAAAAAAAAQJgAgLAAgLAAAAAAAAAAQJgAgLAAyNgAgLD/PwD/PwAAgLAAgLAAyNj40ND40ND4
        0NAAyNgAgLAAQJgAAAAAAAAAAAAAAAAAQJgAQJgAQJgAAAAAAAAAQJgAQJgAgLAAyNgAyNgAgLAAQJgA
        QJgAyNgAyNj40ND40NAAyNgAgLAAQJgAAAAAAAAAAAAAAAAAAAAAAAAAQJgAgLAAgLAAQJgAAAAAQJgA
        QJgAQJgAQJgAAAAAAAAAQJgAgLAAyNgAyNgAgLAAQJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQJgAyNgA
        yNgAgLAAQJgAQJgAAAAAQJgAQJgAAAAAAAAAyNgAQJgAgLAAgLAAQJgAAAAAAAAAAAD///8A/Mf/ANiK
        cwDwAEUAcABcAMwAdgDQADsAEAAfAAAAGAAAAAAAkAAAABAAAAAAAAAAwAABAMAAAACgAAAA4AAAAOAA
        AQDgAAMA8gABAOMAAQDjAAEA+EMDAPgTBwA=
</value>
  </data>
</root>